########## Lab : Terraform Providers 

- How many providers are there ?

❯ pwd
/root/terraform-projects/things-to-do/.terraform/providers

root in things-to-do/.terraform/providers on ☁️  (us-east-1) 
❯ ls
registry.terraform.io



- What is the version of the plugin for the local provider that has been downloaded for this configuration?
    >> Run terraform init and inspect the output or check the version of the plugin downloaded inside the .terraform/providers directory.


########## Lab : Multiple Providers 

- We have a new configuration directory located at the path /root/terraform-projects/multi-provider. Inspect this directory and find out the number of providers initialized.
    >> Go to the .terraform/providers directory and count the number of provider plugins installed. If the directory does not exist, there are no plugins downloaded yet.

    - If 0 directory then it means no providers are been intialized.



- Count the number of plugins being downloaded.

        ❯ ls .terraform/providers/registry.terraform.io/hashicorp/
        local  random

        root in ~/terraform-projects/multi-provider via 💠 default on ☁️  (us-east-1) 
        ❯ ls .terraform/providers/registry.terraform.io/hashicorp/ | wc -l
        2



- Now, Navigate to the directory /root/terraform-projects/MPL. Create a new configuration file called pet-name.tf.
This file should make use of the local_file and random_pet resource type with the below requirements:

        local_file resource details:

            Resource name = "my-pet"
            File name = "/root/pet-name"
            Content = "My pet is called finnegan!!"


        random_pet resource details:

            Resource name = "other-pet"
            Length = "1"
            Prefix = "Mr"
            Separator = "."

    Once the configuration file has been created, use the terraform workflow to create this resource.

    >>
                resource "local_file" "my-pet" {
                    filename = "/root/pet-name"
                    content = "My pet is called finnegan!!"
                }

                resource "random_pet" "other-pet" {
                    length = 1
                    prefix = "Mr."
                    separator = "."
                }



- Now change into the directory /root/terraform-projects/provider and inspect the file cloud-provider.tf.
    What is the instance_type configured with the resource type called aws_instance?




- Let's get some more practice! Now navigate to the directory path /root/terraform-projects/provider-a. Create a configuration file called code.tf.
    Using the local_file resource type, write the resource block with the below requirements into the file:

        Resource name = iac_code
        File name = /opt/practice
        Content = Setting up infrastructure as code

    When ready, only run the terraform init command, we will run the terraform apply command later on.

    >>      resource "local_file" "iac_code" {
                filename = "/opt/practice"
                content = "Setting up infrastructure as code"
            }


########## Lab : Variables

- Now, let's update this resource and add variables instead. Use the default value declared in the variable called jedi.
    This variable is a map. For the argument called content use the value of the key by the same name.
    And, similarly, for the argument called filename use the value by the same name.

    ----- varaibles.tf --------------
    variable "jedi" {
     type = map
     default = {
     filename = "/root/first-jedi"
     content = "phanius"
     }
  
    }

    --------- main.tf ---------------
    resource "local_file" "jedi" {
     filename = var.jedi["filename"]
     content = var.jedi["content"]
    }
    ---------------------------------


