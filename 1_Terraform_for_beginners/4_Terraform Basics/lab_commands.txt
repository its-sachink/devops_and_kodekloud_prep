########## Lab : Terraform Providers 

- How many providers are there ?

❯ pwd
/root/terraform-projects/things-to-do/.terraform/providers

root in things-to-do/.terraform/providers on ☁️  (us-east-1) 
❯ ls
registry.terraform.io



- What is the version of the plugin for the local provider that has been downloaded for this configuration?
    >> Run terraform init and inspect the output or check the version of the plugin downloaded inside the .terraform/providers directory.


########## Lab : Multiple Providers 

- We have a new configuration directory located at the path /root/terraform-projects/multi-provider. Inspect this directory and find out the number of providers initialized.
    >> Go to the .terraform/providers directory and count the number of provider plugins installed. If the directory does not exist, there are no plugins downloaded yet.

    - If 0 directory then it means no providers are been intialized.



- Count the number of plugins being downloaded.

        ❯ ls .terraform/providers/registry.terraform.io/hashicorp/
        local  random

        root in ~/terraform-projects/multi-provider via 💠 default on ☁️  (us-east-1) 
        ❯ ls .terraform/providers/registry.terraform.io/hashicorp/ | wc -l
        2



- Now, Navigate to the directory /root/terraform-projects/MPL. Create a new configuration file called pet-name.tf.
This file should make use of the local_file and random_pet resource type with the below requirements:

        local_file resource details:

            Resource name = "my-pet"
            File name = "/root/pet-name"
            Content = "My pet is called finnegan!!"


        random_pet resource details:

            Resource name = "other-pet"
            Length = "1"
            Prefix = "Mr"
            Separator = "."

    Once the configuration file has been created, use the terraform workflow to create this resource.

    >>
                resource "local_file" "my-pet" {
                    filename = "/root/pet-name"
                    content = "My pet is called finnegan!!"
                }

                resource "random_pet" "other-pet" {
                    length = 1
                    prefix = "Mr."
                    separator = "."
                }



- Now change into the directory /root/terraform-projects/provider and inspect the file cloud-provider.tf.
    What is the instance_type configured with the resource type called aws_instance?




- Let's get some more practice! Now navigate to the directory path /root/terraform-projects/provider-a. Create a configuration file called code.tf.
    Using the local_file resource type, write the resource block with the below requirements into the file:

        Resource name = iac_code
        File name = /opt/practice
        Content = Setting up infrastructure as code

    When ready, only run the terraform init command, we will run the terraform apply command later on.

    >>      resource "local_file" "iac_code" {
                filename = "/opt/practice"
                content = "Setting up infrastructure as code"
            }


########## Lab : Variables

- Now, let's update this resource and add variables instead. Use the default value declared in the variable called jedi.
    This variable is a map. For the argument called content use the value of the key by the same name.
    And, similarly, for the argument called filename use the value by the same name.

    ----- varaibles.tf --------------
    variable "jedi" {
     type = map
     default = {
     filename = "/root/first-jedi"
     content = "phanius"
     }
  
    }

    --------- main.tf ---------------
    resource "local_file" "jedi" {
     filename = var.jedi["filename"]
     content = var.jedi["content"]
    }
    ---------------------------------



########## Lab : Using Variables in terraform

1)        resource local_file games {
        filename = var.filename
        content = "football"
        }

        Error: Reference to undeclared input variable
        │ 
        │   on main.tf line 2, in resource "local_file" "games":
        │    2:   filename = var.filename
        │ 
        │ An input variable with the name "filename" has not been
        │ declared. This variable can be declared with a variable
        │ "filename" {} block.

    >> Declare the variable called filename with type string in the file variables.tf.
    Don't have to specify a default value.



2) Terraform follows a variable definition precedence order to determine the value and
the command line flag of –var or –var-file takes the highest priority.




########## Lab : Resource Attributes

-  resource "time_static" "time_update" {
}

resource "local_file" "time" {
  filename = "/root/time.txt"
  content = "${time_static.time_update.id}"
}




########## Lab : Resource Dependencies

- Now, let's use the private key created by this resource in another resource of type local file. Update the key.tf file with the requirements:
    
        Resource Name: key_details
        File Name: /root/key.txt
        Content: use a reference expression to use the attribute called private_key_pem of the pvtkey resource.
    
    When ready, run terraform init, plan and apply.

    ---------- key.tf -----------
    resource "tls_private_key" "pvtkey" {
    algorithm = "RSA"
    rsa_bits  = 4096
    }

    resource "local_file" "key_details" {
    content  = tls_private_key.pvtkey.private_key_pem
    filename = "/root/key.txt"
    }
    ----------------------------------------

    - This is called implicit Dependencies


- Now explicit dependency, Within this directory, create two local_file type resources in main.tf file.

        Resource 1:
        Resource Name: whale
        File Name: /root/whale
        content: whale

        Resource 2:
        Resource Name: krill
        File Name: /root/krill
        content: krill

    -** Resource called whale should depend on krill but do not use reference expressions.
        When ready, run terraform init, plan and apply.

    -------- main.tf -----------
        resource "local_file" "whale" {
        filename   = "/root/whale"
        content    = "whale"
        depends_on = [local_file.krill]
        }
        resource "local_file" "krill" {
        filename = "/root/krill"
        content  = "krill"
        }
    ---------------------------



########## Lab : Output variables

------ main.tf ---------
resource "random_uuid" "id1" {
   
}
resource "random_uuid" "id2" {
   
}
resource "random_uuid" "id3" {
   
}
resource "random_uuid" "id4" {
   
}
resource "random_uuid" "id5" {
   
}
resource "random_uuid" "id6" {
   
}
resource "random_uuid" "id7" {
   
}
resource "random_integer" "order1" {
  min     = 1
  max     = 99999
 
}
resource "random_integer" "order2" {
  min     = 1
  max     = 222222
 
}

------ output.tf -------
output "id1" {
   value = random_uuid.id1.result
}
output "id2" {
    value = random_uuid.id2.result
   
}
output "id3" {
    value = random_uuid.id3.result
   
}

output "id4" {
    value = random_uuid.id4.result
   
}
output "id5" {
    value = random_uuid.id5.result
}
   
output "id6" {
    value = random_uuid.id6.result
   
}
output "id7" {
    value = random_uuid.id7.result
   
}
output "order1" {
 value = random_integer.order1.result
 
}
output "order2" {
 value = random_integer.order1.result
 
}


- Run: terraform output command inside the configuration directory.
        # terraform output order1


----------------
resource "random_pet" "my-pet" {

  length    = var.length 
}

output "pet-name" {
	
	value = random_pet.my-pet.id
	description = "Record the value of pet ID generated by the random_pet resource"
}
-----------------

- terraform output pet-name




########## Lab : Terraform State

