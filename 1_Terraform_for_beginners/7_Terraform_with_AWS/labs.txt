####### 1 : AWS CLI & IAM #######

Note : As explained in the Lab Demonstration video, we are making use of localstack as the mocking framework to work with AWS.
This framework is exposed at http://aws:4566. Hence, throughout this lab, we will be making use of the command option and parameter like this: --endpoint http://aws:4566


- Create a new user called mary using the AWS CLI.
    Make sure to use the --endpoint http://aws:4566 option with the command.

    # aws --endpoint http://aws:4566 iam create-user --user-name mary


- Now, inspect the newly created user mary and find out its ARN (Amazon Resource Name).

    # aws --endpoint http://aws:4566 iam list-users


- What is the default region that has been configured for use with the AWS CLI?

    # cat /root/.aws/config


- What is the aws_access_key_id used in the configuration?

    # cat /root/.aws/credentials



- Now that we have a few users created, let's grant them privileges.
    Let's start with mary, grant her full administrator access by making use of the policy called AdministratorAccess.

    Make use of the subcommand attach-user-policy.
    
    The ARN of the AdministratorAccess policy is arn:aws:iam::aws:policy/AdministratorAccess.

    # aws --endpoint http://aws:4566 iam attach-user-policy --user-name mary --policy-arn arn:aws:iam::aws:policy/AdministratorAccess




- jack and jill are developers and are part of a project called project-sapphire.
    Create a new IAM Group called project-sapphire-developers. Use the subcommand create-group to create the group.

    # aws --endpoint http://aws:4566 iam create-group --group-name project-sapphire-developers


- Add the IAM users called jack and jill, who are developers to the new IAM Group called project-sapphire-developers.
        Use the subcommand add-user-to-group to add users into the group.

    # aws --endpoint http://aws:4566 iam add-user-to-group --user-name jack --group-name project-sapphire-developers

    # aws --endpoint http://aws:4566 iam add-user-to-group --user-name jill --group-name project-sapphire-developers



- What privileges are granted for jack and jill who are part of the group project-sapphire-developers?
        Check for their permissions individually and the ones granted to the group.

    
    # aws --endpoint http://aws:4566 iam list-attached-group-policies --group-name project-sapphire-developers

    # aws --endpoint http://aws:4566 iam list-attached-user-policies --user-name jack



- Both jack and jill need complete access to the EC2 service.
       Attach the AmazonEC2FullAccess policy with the ARN: arn:aws:iam::aws:policy/AmazonEC2FullAccess to the group project-sapphire-developers.

    # aws --endpoint http://aws:4566 iam attach-group-policy --group-name project-sapphire-developers  --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess



####### 2 : IAM with Terraform #######

- Let's start off by creating an IAM User called mary but this time by making use of Terraform. In the configuration directory /root/terraform-projects/IAM, create a file called iam-user.tf with the following specifications:

    Resource Type: aws_iam_user
    Resource Name: users
    Name: mary

    --------------------------------------------
    resource "aws_iam_user" "users" {
        name = "mary"
    }
    --------------------------------------------


- Add a new file called provider.tf containing a provider block for aws.
    Inside this block add a single argument called region with the value ca-central-1.

    ---------------- provider.tf ----------------------------
    provider "aws" {
    region                      = "us-east-1"
    skip_credentials_validation = true
    skip_requesting_account_id  = true

    endpoints {
        iam                       = "http://aws:4566"
    }
    }
    --------------------------------------------


- Use the count to add the list of variables from the "variables.tf" file.

   ---------------- variables.tf ----------------------------
    variable "project-sapphire-users" {
        type = list(string)
        default = [ "mary", "jack", "jill", "mack", "buzz", "mater"]
    }
   -----------------------------------------------------------------


- Now, update the iam-user.tf to make use of the count meta-argument to loop through the project-sapphire-users variable and create all the users in the list.
    You may want to make use of the length function to get the length of the list.

    --------------------------------------------
    resource "aws_iam_user" "users" {
        for_each = toset(var.project-sapphire-users)         <<<< Preferred one
        name = each.value
    }
    --------------------------------------------

    OR 
    --------------------------------------------
    resource "aws_iam_user" "users" {
        count = length(var.project-sapphire-users)
        name = var.project-sapphire-users[count.index]
    }
    --------------------------------------------




####### 3 : Terraform with AWS S3 #######





####### 4 : DynamoDB #######


