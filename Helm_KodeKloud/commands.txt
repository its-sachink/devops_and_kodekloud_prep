########### Chapter 2 : Installation and Configuration ############

- Install the helm package on the controlplane node.
    If unsure how to install the helm tool, feel free to refer to the documentation. 
    The Documentation tab is available at the top right panel.

    # curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    # chmod 700 get_helm.sh
    # ./get_helm.sh

    - Documentation page location : https://helm.sh/docs/intro/install/#from-script



- Awesome ðŸ’ª!! Now that you have Helm installed âœ¨ identify the Helm version in the cluster.

    # helm version



- Which environment variable can be used to indicate whether or not Helm is running in Debug mode?
    Use the help mode of the helm command to look for this information.

    # $HELM_DEBUG                        | indicate whether or not Helm is running in Debug mode


- What is a command line flag that can be used to enable verbose output?

    # --debug                           enable verbose output

    --
  hooks       download all hooks for a named release
  manifest    download the manifest for a named release
  metadata    This command fetches metadata for a given release
  notes       download the notes for a named release
  values      download the values file for a named release





########### Lab : Using HELM to deploy the application

- Which command is used to search for a wordpress helm chart package from the Artifact Hub?

    # helm search hub wordpress


- Search for a consul helm chart package from the Artifact Hub and identify the APP VERSION for the Official HashiCorp Consul Chart.

    # helm search hub consul | grep hashicorp

        - and check the APP VERSION.


- Add bitnami helm chart repository in the controlplane node. The url for bitnami repository is https://charts.bitnami.com/bitnami

    # helm repo add bitnami https://charts.bitnami.com/bitnami



- Which command is used to search for the wordpress package from the newly added bitnami repository?

    # helm search repo wordpress


- How many helm chart repositories are there in the controlplane node now?

    # helm repo list
    NAME            URL                                                 
    bitnami         https://charts.bitnami.com/bitnami                  
    puppet          https://puppetlabs.github.io/puppetserver-helm-chart
    hashicorp       https://helm.releases.hashicorp.com



- Deploy the Apache application on the cluster using the apache from the bitnami repository.
    Set the release name to : amaze-surf

    # helm install amaze-surf bitnami/apache
    # helm install release-name repo-name/package-name


- What version of apache did we just install on the cluster using the helm chart?

    # helm list | grep -i apache
    amaze-surf      default         1               2023-12-09 03:17:05.017069989 -0500 EST deployed        apache-10.2.4   2.4.58


- How many releases of nginx charts can you see installed in the cluster now?

    # helm list | grep -i nginx
    crazy-web       default         1               2023-12-09 03:18:30.802957286 -0500 EST deployed        nginx-15.4.4    1.25.3     
    happy-browse    default         1               2023-12-09 03:18:27.578236725 -0500 EST deployed        nginx-15.4.4    1.25.3


- Uninstall the nginx chart release happy-browse from the cluster.

     # helm list | grep -i nginx
    crazy-web       default         1               2023-12-09 03:18:30.802957286 -0500 EST deployed        nginx-15.4.4    1.25.3     
    happy-browse    default         1               2023-12-09 03:18:27.578236725 -0500 EST deployed        nginx-15.4.4    1.25.3

    # helm uninstall happy-browse
    release "happy-browse" uninstalled

    # helm list | grep -i nginx
    crazy-web       default         1               2023-12-09 03:18:30.802957286 -0500 EST deployed        nginx-15.4.4    1.25.3



- Remove the Hashicorp helm repository from the cluster.

    # helm repo remove hashicorp
    "hashicorp" has been removed from your repositories




########### Lab : Upgrading a HELM chart

- Add bitnami helm chart repository to the cluster.
        Note: - Make sure to add the bitnami chart to the cluster before moving to the next questions.

    # helm repo add bitnami https://charts.bitnami.com/bitnami


- How many releases of nginx can you see in the cluster now?

    # helm list | grep -i nginx
    dazzling-web    default         3               2023-12-09 04:03:23.452329297 -0500 EST deployed        nginx-12.0.4    1.22.0


- How many revisions of nginx exists in the cluster?

    # helm history dazzling-web
    REVISION        UPDATED                         STATUS          CHART          APP VERSION      DESCRIPTION     
    1               Sat Dec  9 04:03:13 2023        superseded      nginx-12.0.4   1.22.0           Install complete
    2               Sat Dec  9 04:03:17 2023        superseded      nginx-12.0.5   1.22.0           Upgrade complete
    3               Sat Dec  9 04:03:23 2023        deployed        nginx-12.0.4   1.22.0           Upgrade complete



- Which version of nginx is currently running in the cluster?

    # Check for the "deployed" status in the HELM chart history command. It is 1.22.0



- The DevOps team has decided to upgrade the nginx to version 1.23 in the bitnami repository.
    Make sure that the nginx version running in the cluster is 1.23.x.

    - You can install any nginx helm chart version above 13 for installing 1.23.
    
    # helm upgrade dazzling-web bitnami/nginx --version 13
    helm upgrade dazzling-web bitnami/nginx --version 13
    Release "dazzling-web" has been upgraded. Happy Helming!
    NAME: dazzling-web
    LAST DEPLOYED: Sat Dec  9 04:08:13 2023
    NAMESPACE: default
    STATUS: deployed
    REVISION: 4
    TEST SUITE: None
    NOTES:
    CHART NAME: nginx
    CHART VERSION: 13.2.34
    APP VERSION: 1.23.4



- To which version is the nginx currently upgraded?

    helm list
    NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION
    dazzling-web    default         4               2023-12-09 04:08:13.060832605 -0500 EST deployed        nginx-13.2.34   1.23.4

    - The APP VERISION is "1.23.4"


- Oops!.. There seems to be a minor issue in the website and the DevOps Team is asked to rollback the nginx to previous version!
    Please rollback the nginx to previous version.

    # helm list
    NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION
    dazzling-web    default         4               2023-12-09 04:08:13.060832605 -0500 EST deployed        nginx-13.2.34   1.23.4

    - The current Revision is 4, lets check all the revisions.

    # helm history dazzling-web
    REVISION        UPDATED                         STATUS          CHART          APP VERSION      DESCRIPTION     
    1               Sat Dec  9 04:03:13 2023        superseded      nginx-12.0.4   1.22.0           Install complete
    2               Sat Dec  9 04:03:17 2023        superseded      nginx-12.0.5   1.22.0           Upgrade complete
    3               Sat Dec  9 04:03:23 2023        superseded      nginx-12.0.4   1.22.0           Upgrade complete
    4               Sat Dec  9 04:08:13 2023        deployed        nginx-13.2.34  1.23.4           Upgrade complete

    - Now rollback to revision 3.

    # helm rollback dazzling-web 3
    Rollback was a success! Happy Helming!




########### Chapter 3 : HELM Charts Anatomy ############



########### Lab : Wiriting a HELM chart

----------------------- Sample chart file --------------------------------
controlplane ~/hello-world is ðŸ“¦ v0.1.0 via âŽˆ v3.13.1 âžœ  ls
Chart.yaml  README.md  templates  values.yaml

controlplane ~/hello-world is ðŸ“¦ v0.1.0 via âŽˆ v3.13.1 âžœ  cat Chart.yaml 
apiVersion: v2
appVersion: 1.16.0
description: A Helm chart for Kubernetes
Name: hello-world
type: application
version: 0.1.0

controlplane ~/hello-world is ðŸ“¦ v0.1.0 via âŽˆ v3.13.1 âžœ  cat templates/
deployment.yaml  service.yaml     

controlplane ~/hello-world is ðŸ“¦ v0.1.0 via âŽˆ v3.13.1 âžœ  cat templates/deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-hello-world
  labels:
    app: hello-world
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http

controlplane ~/hello-world is ðŸ“¦ v0.1.0 via âŽˆ v3.13.1 âžœ  cat values.yaml 
# Default values for hello-world.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.16.0"

nameOverride: ""
fullnameOverride: ""
------------------------------------------------------------------------------

- Create a helm chart at /root/webapp-nginx for this application by converting the deployment and service definition files into templates.
    
    Create a chart first and then move the definition files into the templates directory.
        The deployment and service objects should be named in the format RELEASE-NAME-nginx.
        Set apiVersion for the chart to v2.
        Name the chart webapp-nginx.
        Set version number to 0.1.1.
        Set appVersion to 1.16.0.
            Values file has a variable image set by default so make changes for an image nginx:1.16.0.
        Value of image variable to be used in deployment as the image name for the container.

    Note: - Remove the unused YAML and text files from the templates directory.

---------------------- sample files ---------------------------
controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  ls
charts  Chart.yaml  templates  values.yaml

controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  cat Chart.yaml 
apiVersion: v2
name: webapp-nginx
description: A Helm chart for Kubernetes
type: application
version: 0.1.1
appVersion: "1.16.0"

controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  cat values.yaml 
replicaCount: 1

image:
  repository: nginx
  tag: 1.16.0

service:
  type: NodePort
  port: 80
  nodePort: 30080

controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  cat templates/service.yaml 
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-nginx
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      nodePort: {{ .Values.service.nodePort }}
      name: http
  selector:
    app: nginx

controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  cat templates/deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: {{ .Values.image.repository }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP

--------------------------------------------------------------------

- Now install the webapp-nginx helm chart.
    Release-Name:webapp


        controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  ls
        charts  Chart.yaml  templates  values.yaml

        controlplane ~/webapp-nginx is ðŸ“¦ v0.1.1 via âŽˆ v3.13.1 âžœ  cd ..

        controlplane ~ âžœ  helm install webapp ./webapp-nginx/
        NAME: webapp
        LAST DEPLOYED: Tue Dec 12 01:13:02 2023
        NAMESPACE: default
        STATUS: deployed
        REVISION: 1
        TEST SUITE: None

        controlplane ~ âžœ  kubectl get deploy | grep -i webapp
        webapp-nginx   1/1     1            1           13s




########### Lab : Using Functions and Pipelines


- Which function takes a list of values and returns the first non-empty one?

        The coalesce function takes a list of values and returns the first non-empty one.
            coalesce 0 1 2
            The above returns 1


- Which function can be used to generate a random password that uses only letters a-zA-Z ?

        Function randAlpha can be used to generate cryptographically secure (uses crypto/rand) random strings with characters a-zA-Z.


- What would be the output of this expression if wordpressPassword is PassW0rd ?
        {{ .Values.wordpressPassword | b64enc | quote }}


        Run the command: 
            # echo -n PassW0rd | base64
            UGFzc1cwcmQ=

                to generate the base64 encoded string and -n flag removes the trailing newlines.


- We have created a helm chart package at /root/ directory named webapp. What will be the tag name for the container image that will be created when we deploy the helm package webapp?

    {{ .Values.image.tag | default .Chart.AppVersion }}

    - If you check values.yaml file, the tag is mentioned empty, which means the tag name will be the AppVersion mentioned in the Chart.yaml.


- What about now? What will be the tag set on the container image now? We made a few changes.

    When you check the deployment.yaml file you can see tag name as,

        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default 2.4 }}"



- We have decided that all labels have the first letter in upper case. 
    Change the serviceaccount.yaml file so that the label tier ends up being Frontend instead of the frontend as it is currently. 
    Any label set in the values.yaml file for the service account must have its first letter converted to upper case.

    You may use a command like this to test your work:
        # helm template /root/webapp --set serviceAccount.labels.tier=customlabel

    This overrides the default label set in the values.yaml file with a custom label you pass in from the command line. 
    Then look for the generated serviceaccount.yaml file.
        # helm template /root/webapp --set serviceAccount.labels.tier=customlabel | grep tier


    - In the serviceaccount.yaml edit the label as : 
        tier: {{ .Values.serviceAccount.labels.tier | title }}


- Use the appropriate function to convert the label app in the serviceaccount.yaml file from web_application to WebApplication .

        web_site should become WebSite
        my_site should become MySite

    - In the serviceaccount.yaml edit the label as: app: {{ .Values.serviceAccount.labels.app | camelcase }}

    # helm template /root/webapp/ --set serviceAccount.labels.app=web_site | grep -i website
    app: WebSite


- Now install the webapp chart.
        Set the release-name as my-web-app
  


########### Lab : Conditionals, With Blocks

- Now update the service.yaml file in such a way that if the service type is NodePort, then it should fetch the nodePort value from the values.yaml file.

    The service.yaml file is located under the /root/webapp-color/templates directory.

            apiVersion: v1
            kind: Service
            metadata:
            name: {{ .Values.name }}
            namespace: default
            spec:
            ports:
            - port: 8080
                protocol: TCP
                targetPort: 8080
                {{- if eq .Values.service.type "NodePort" }}
                nodePort: {{ .Values.service.nodePort }}
                {{- end }}
            selector:
                name: webapp-color
            type: {{ .Values.service.type }}
            status:
            loadBalancer: {}



- Now update the configmap.yaml in such a way that the APP_COLOR should take the values based on the environment defined in values.yaml.

        - if environment is production, value should be pink.
        - else if environment is development, value should be darkblue.
        - else, value should be green.
                Note: Only make the necessary changes in the configmap.yaml file.

        apiVersion: v1
        metadata:
        name: {{ .Values.configMap.name }}
        namespace: default
        kind: ConfigMap
        data:
        {{- if eq .Values.environment "production" }}
            APP_COLOR: pink
        {{- else if eq .Values.environment "development" }}
            APP_COLOR: darkblue
        {{- else }}
            APP_COLOR: green
        {{- end }}


- If we try to install the webapp-color helm chart repository now, will the serviceAccount be created?

        serviceAccount:
        # Specifies whether a service account should be created
        create: false
        # Annotations to add to the service account
        annotations: {}
        # The name of the service account to use.

        - Since we are not making use of a conditional for the service account, the field create: false in the values.yaml file is ignored.


- Make appropriate changes in the serviceaccount.yaml file to:
    - Check whether serviceAccount should be created or not (use the with conditional).
    - Use the serviceAccount name from the values.yaml file.

        {{- with .Values.serviceAccount.create }}
        apiVersion: v1
        kind: ServiceAccount
        metadata:
        name: {{ .Values.serviceAccount.name }}
        labels:
            app: webapp-color
        {{- end }}


-   Now that we have updated the serviceaccount.yaml file with the condition, update the values.yaml file to enable creation of serviceaccount.

        The serviceaccount section in the values.yaml should be modified as follows:

            serviceAccount:
                # Specifies whether a service account should be created
                create: true




- Try to dry-run the webapp-color chart now. Fix the chart if there is any issues with the chart.

    # helm install webapp /root/webapp-color/ --dry-run
    Error: INSTALLATION FAILED: template: webapp-color/templates/serviceaccount.yaml:5:18: executing "webapp-color/templates/serviceaccount.yaml" at <.Values.serviceAccount.name>: can't evaluate field Values in type bool

    --
    You need to add $ symbol as mentioned in the solution file for serviceaccount.yaml provided below:

    {{- with .Values.serviceAccount.create }}
    apiVersion: v1
    kind: ServiceAccount
    metadata:
    name: {{ $.Values.serviceAccount.name }}
    labels:
        app: webapp-color
    {{- end }}



- Set additional labels for the serviceaccount which is defined in the values.yaml under the serviceAccount section.

        serviceAccount:
        # Specifies whether a service account should be created
        create: true
        # Annotations to add to the service account
        annotations: {}
        # The name of the service account to use.
        # If not set and create is true, a name is generated using the fullname template
        name: webapp-sa
        labels:
            tier: frontend
            type: web
            mode: proxy

    After deploying on the cluster. Please make sure that the keys and values are fetched from the values.yaml in the form as shown below:

    For example:

        Name:                webapp-sa
        Namespace:           default
        Labels:              app=webapp-color
                            app.kubernetes.io/managed-by=Helm
                            mode=proxy
                            tier=frontend
                            type=web
        ...


    ----
        {{- with .Values.serviceAccount.create }}
        apiVersion: v1
        kind: ServiceAccount
        metadata:
        name: {{ $.Values.serviceAccount.name }}
        labels:
            {{- range $key, $val := $.Values.serviceAccount.labels }}
            {{ $key }}: {{ $val }}
            {{- end }}
            app: webapp-color
        {{- end }}